confusion_MS <- as.data.frame(table(factor(MS$name),factor(tolower(MS_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_MS %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white")+
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_MS$Freq)))+
ggtitle('MS : OVERALL CONFUSION MATRIX-USER')
confusionMatrix(data = factor(MS$name),reference = factor(tolower(MS_T$name)))
# IBM Overall Chat Confusion Matrix
IBM_T <- actual_IBM %>%  filter(user != "Bot") %>% group_by(chatid) %>% summarise(ANGRY=sum(ANGRY),SAD=sum(SAD),JOY=sum(JOY),CONFIDENT=sum(CONFIDENT),ANALYTICAL=sum(ANALYTICAL),TENTATIVE=sum(TENTATIVE),FEAR=sum(FEAR)) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","CONFIDENT","ANALYTICAL","TENTATIVE","FEAR")) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
IBM <- document_detail_ibm_tbl_pref %>% filter(user != "Bot") %>%  rename(analytical=Analytical,sad=Sadness,confident=Confident,joy=Joy,tentative=Tentative,angry=Anger,fear=Fear) %>%  pivot_longer(cols = c("angry","sad","joy","confident","analytical","tentative","fear")) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
IBM <- IBM %>% inner_join(IBM_T %>% select(chatid),by = c("chatid"="chatid")) %>% arrange(chatid)
IBM_T <- IBM_T %>% inner_join(IBM %>% select(chatid),by = c("chatid"="chatid")) %>% arrange(chatid)
confusion_IBM <- as.data.frame(table(factor(IBM$name),factor(tolower(IBM_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_IBM %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white")+
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_IBM$Freq)))+
ggtitle('IBM : OVERALL CONFUSION MATRIX')
confusionMatrix(data = factor(IBM$name),reference = factor(tolower(IBM_T$name)))
# IBM Overall Chat Confusion Matrix [4 main emotions only]
IBM_T1 <- actual_IBM %>%  filter(user != "Bot") %>% group_by(chatid) %>% summarise(ANGRY=sum(ANGRY),SAD=sum(SAD),JOY=sum(JOY),CONFIDENT=sum(CONFIDENT),ANALYTICAL=sum(ANALYTICAL),TENTATIVE=sum(TENTATIVE),FEAR=sum(FEAR)) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","CONFIDENT","ANALYTICAL","TENTATIVE","FEAR")) %>% filter(name!="CONFIDENT",name!="ANALYTICAL",name!="TENTATIVE" ) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1)  %>% filter(n()==1) %>% ungroup()
IBM1 <- document_detail_ibm_tbl_pref %>% filter(user != "Bot") %>%  rename(analytical=Analytical,sad=Sadness,confident=Confident,joy=Joy,tentative=Tentative,angry=Anger,fear=Fear) %>%  pivot_longer(cols = c("angry","sad","joy","confident","analytical","tentative","fear")) %>% filter(name!="confident",name!="analytical",name!="tentative" ) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T )  %>% top_n(1) %>% filter(n()==1) %>% ungroup()
IBM1 <- IBM1 %>% inner_join(IBM_T1 %>% select(chatid),by = c("chatid"="chatid")) %>% arrange(chatid)
IBM_T1 <- IBM_T1 %>% inner_join(IBM1 %>% select(chatid),by = c("chatid"="chatid")) %>% arrange(chatid)
confusion_IBM1 <- as.data.frame(table(factor(IBM1$name),factor(tolower(IBM_T1$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_IBM1 %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white")+
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_IBM1$Freq)))+
ggtitle('IBM : OVERALL CONFUSION MATRIX[4 MAIN EMOTIONS]-USER')
confusionMatrix(data = factor(IBM1$name),reference = factor(tolower(IBM_T1$name)))
}
# Chunk 11
if (DisplaySentenceLvlConfusionMatrix) {
# Parallel Dots Sentence Level Confusion Matrix
PD_sen_T <- actual_PD %>% filter(user != "Bot") %>%  select(chatid,chatorder,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY) %>% pivot_longer(cols = c("ANGRY","SAD","FEAR","BORED","EXCITED","HAPPY")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
PD_sen <- sentence_detail_pd_tbl %>% filter(user != "Bot") %>% select(chatid,chatorder,happy,bored,sad,excited,fear,angry) %>% pivot_longer(cols = c("happy","bored","sad","excited","fear","angry")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
PD_sen <- PD_sen %>% inner_join(PD_sen_T %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% arrange(chatid,chatorder)
PD_sen_T <- PD_sen_T %>% inner_join(PD_sen %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))%>% arrange(chatid,chatorder)
confusion_sentence_PD <- as.data.frame(table(factor(PD_sen$name),factor(tolower(PD_sen_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_sentence_PD %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white")+
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_PD$Freq)))+
ggtitle('PARALLEL DOTS : SENTENCE CONFUSION MATRIX-USER')
confusionMatrix(data = factor(PD_sen$name),reference = factor(tolower(PD_sen_T$name)))
# MS Analytics Sentence Level Confusion Matrix
MS_sen_T <- actual_MS %>% filter(user != "Bot") %>%  select(chatid,chatorder,POSITIVE,NEUTRAL,NEGATIVE) %>% pivot_longer(cols = c("POSITIVE","NEUTRAL","NEGATIVE")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
MS_sen <- sentence_detail_ms_tbl %>% filter(user != "Bot")  %>% select(chatid,chatorder,positive,neutral,negative) %>% pivot_longer(cols = c("positive","neutral","negative")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
MS_sen <- MS_sen %>% inner_join(MS_sen_T %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% arrange(chatid,chatorder)
MS_sen_T <- MS_sen_T %>% inner_join(MS_sen %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))%>% arrange(chatid,chatorder)
confusion_sentence_MS <- as.data.frame(table(factor(MS_sen$name),factor(tolower(MS_sen_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_sentence_MS %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_MS$Freq)))+
ggtitle('MS : SENTENCE CONFUSION MATRIX-USER')
confusionMatrix(data = factor(MS_sen$name),reference = factor(tolower(MS_sen_T$name)))
# IBM Sentence Level Confusion Matrix
IBM_sen_T <- actual_IBM %>% filter(user != "Bot") %>%  select(chatid,chatorder,ANGRY,SAD,JOY,CONFIDENT,ANALYTICAL,TENTATIVE,FEAR) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","CONFIDENT","ANALYTICAL","TENTATIVE","FEAR")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
IBM_sen <- document_detail_ibm_tbl1    %>% group_by(chatid,chatorder) %>% arrange(desc(score), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup() #document_detail_ibm_tbl1 OR sentence_detail_ibm_tbl1
IBM_sen <- IBM_sen %>% inner_join(IBM_sen_T %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% arrange(chatid,chatorder)
IBM_sen_T <- IBM_sen_T %>% inner_join(IBM_sen %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))%>% arrange(chatid,chatorder)
confusion_sentence_IBM <- as.data.frame(table(factor(tolower(IBM_sen$tone_name)),factor(tolower(IBM_sen_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_sentence_IBM %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_IBM$Freq)))+
ggtitle('IBM : SENTENCE CONFUSION MATRIX-USER')
confusionMatrix(data = factor(MS_sen$name),reference = factor(tolower(MS_sen_T$name)))
# IBM Sentence Level Confusion Matrix [4 MAIN EMOTIONS]
IBM_sen_T1 <- actual_IBM %>% filter(user != "Bot") %>%  select(chatid,chatorder,ANGRY,SAD,JOY,FEAR) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","FEAR")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()
IBM_sen1 <- document_detail_ibm_tbl1 %>% filter(tone_name %in% c("Anger","Sadness","Joy","Fear"))  %>% group_by(chatid,chatorder) %>% arrange(desc(score), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup() #document_detail_ibm_tbl1 OR sentence_detail_ibm_tbl1
IBM_sen1 <- IBM_sen1 %>% inner_join(IBM_sen_T1 %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% arrange(chatid,chatorder)
IBM_sen_T1 <- IBM_sen_T1 %>% inner_join(IBM_sen1 %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))%>% arrange(chatid,chatorder)
confusion_sentence_IBM1 <- as.data.frame(table(factor(tolower(IBM_sen1$tone_name)),factor(tolower(IBM_sen_T1$name)))) %>% rename(Prediction=Var1,Truth=Var2)
confusion_sentence_IBM1 %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_IBM1$Freq)))+
ggtitle('IBM : SENTENCE CONFUSION MATRIX[4 MAIN EMOTIONS]-USER')
confusionMatrix(data = factor(MS_sen1$name),reference = factor(tolower(MS_sen_T1$name)))
}
# Chunk 12
if (SentenceLvlRandomForest) {
# Parallel Dots Sentence Level Random Forest
pd_rf_sentence <-  sentence_detail_pd_tbl  %>% select(chatid,chatorder,happy,bored,sad,excited,fear,angry) %>% inner_join(PD_sen_T %>% rename(actualemotion=name))
pd_rf_sentence <- pd_rf_sentence %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))
set.seed(1000)
pd_rf_sentence_train <- sample_n(pd_rf_sentence,size =as.integer(round(count(pd_rf_sentence)/2,0)),replace = T)
pd_rf_sentence_test <- sample_n(pd_rf_sentence,size =as.integer(round(count(pd_rf_sentence)/2,0)),replace = T)
pd_rf_sen_model <-  randomForest(actualemotion ~ happy+bored+sad+excited+fear+angry,data = pd_rf_sentence_train, proximity=T)
pd_rf_sen_model
pd_rf_sentence_test_outcome <- predict(pd_rf_sen_model, pd_rf_sentence_test, type = "class")
table(pd_rf_sentence_test_outcome,pd_rf_sentence_test$actualemotion)
pd_rf_sentence_test_result <- as.data.frame(table(pd_rf_sentence_test_outcome,factor(tolower(pd_rf_sentence_test$actualemotion)))) %>% rename(Prediction=pd_rf_sentence_test_outcome,Truth=Var2)
pd_rf_sentence_test_result %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(pd_rf_sentence_test_result$Freq)))+
ggtitle(paste('PD:RF SENTENCE CONFUSION MATRIX-USER , Error%=',round(1-mean(pd_rf_sentence_test_outcome == pd_rf_sentence_test$actualemotion),2)))+
labs(subtitle = "actualemotion ~ happy+bored+sad+excited+fear+angry")
if(FALSE)
{
pd_rf_sen_model_err <- data.frame(
Trees=rep(1:nrow(pd_rf_sen_model$err.rate),times=6),
Type =rep(c("OOB","ANGRY","BORED","FEAR","HAPPY","SAD"),each=nrow(pd_rf_sen_model$err.rate)),
Error = c(pd_rf_sen_model$err.rate[,"OOB"],
pd_rf_sen_model$err.rate[,"ANGRY"],
pd_rf_sen_model$err.rate[,"BORED"],
pd_rf_sen_model$err.rate[,"FEAR"],
pd_rf_sen_model$err.rate[,"HAPPY"],
pd_rf_sen_model$err.rate[,"SAD"])
)
ggplot(data=pd_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))
val <-  vector(length = 10)
for (i in 1:10) {
temp_model <-  randomForest(actualemotion ~ happy+bored+sad+excited+fear+angry,data = pd_rf_sentence_train, ntree=1000,mtry=i)
val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}
val
}
# MS Sentence Level Random Forest
ms_rf_sentence <-  sentence_detail_ms_tbl %>% select(chatid,chatorder,positive,neutral,negative) %>% inner_join(MS_sen_T %>% rename(actualemotion=name),by = c("chatid"="chatid","chatorder"="chatorder"))
ms_rf_sentence <- ms_rf_sentence %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))
set.seed(1000)
ms_rf_sentence_train <- sample_n(ms_rf_sentence,size =as.integer(round(count(ms_rf_sentence)/2,0)),replace = T)
ms_rf_sentence_test <- sample_n(ms_rf_sentence,size =as.integer(round(count(ms_rf_sentence)/2,0)),replace = T)
ms_rf_sen_model <-  randomForest(actualemotion ~ positive+neutral+negative,data = ms_rf_sentence_train, proximity=T)
ms_rf_sen_model
ms_rf_sentence_test_outcome <- predict(ms_rf_sen_model, ms_rf_sentence_test, type = "class")
table(ms_rf_sentence_test_outcome,ms_rf_sentence_test$actualemotion)
ms_rf_sentence_test_result <- as.data.frame(table(ms_rf_sentence_test_outcome,factor(tolower(ms_rf_sentence_test$actualemotion)))) %>% rename(Prediction=ms_rf_sentence_test_outcome,Truth=Var2)
ms_rf_sentence_test_result %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(ms_rf_sentence_test_result$Freq)))+
ggtitle(paste('MS:RF SENTENCE CONFUSION MATRIX-USER , Error%=',round(1-mean(ms_rf_sentence_test_outcome == ms_rf_sentence_test$actualemotion),2)))+
labs(subtitle = "actualemotion ~ positive+neutral+negative")
if (FALSE)
{
ms_rf_sen_model_err <- data.frame(
Trees=rep(1:nrow(ms_rf_sen_model$err.rate),times=4),
Type =rep(c("OOB","NEGATIVE","NEUTRAL","POSITIVE"),each=nrow(ms_rf_sen_model$err.rate)),
Error = c(ms_rf_sen_model$err.rate[,"OOB"],
ms_rf_sen_model$err.rate[,"NEGATIVE"],
ms_rf_sen_model$err.rate[,"NEUTRAL"],
ms_rf_sen_model$err.rate[,"POSITIVE"])
)
ggplot(data=ms_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))
val <-  vector(length = 10)
for (i in 1:10) {
temp_model <-  randomForest(actualemotion ~ positive+neutral+negative,data = ms_rf_sentence_train, ntree=1000,mtry=i)
val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}
val
}
# IBM Sentence Level Random Forest
ibm_rf_sentence <-  document_detail_ibm_tbl1 %>% select(chatid,chatorder,score,tone_id) %>% pivot_wider(names_from = tone_id,values_from = score) %>% replace(.,is.na(.),0)  %>% group_by(chatid,chatorder) %>% summarise_all(sum) %>% inner_join(IBM_sen_T %>% rename(actualemotion=name),by = c("chatid"="chatid","chatorder"="chatorder"))
ibm_rf_sentence <- ibm_rf_sentence %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))
set.seed(1000)
ibm_rf_sentence_train <- sample_n(ibm_rf_sentence,size =as.integer(round(count(ibm_rf_sentence)/2,0)),replace = T)
ibm_rf_sentence_test <- sample_n(ibm_rf_sentence,size =as.integer(round(count(ibm_rf_sentence)/2,0)),replace = T)
ibm_rf_sen_model <-  randomForest(actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear,data = ibm_rf_sentence_train, proximity=T)
ibm_rf_sen_model
ibm_rf_sentence_test_outcome <- predict(ibm_rf_sen_model, ibm_rf_sentence_test, type = "class")
table(ibm_rf_sentence_test_outcome,ibm_rf_sentence_test$actualemotion)
ibm_rf_sentence_test_result <- as.data.frame(table(ibm_rf_sentence_test_outcome,factor(tolower(ibm_rf_sentence_test$actualemotion)))) %>% rename(Prediction=ibm_rf_sentence_test_outcome,Truth=Var2)
ibm_rf_sentence_test_result %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(ibm_rf_sentence_test_result$Freq)))+
ggtitle(paste('IBM:RF SENTENCE CONFUSION MATRIX-USER , Error%=',round(1-mean(ibm_rf_sentence_test_outcome == ibm_rf_sentence_test$actualemotion),2)))+
labs(subtitle = "actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear")
if (FALSE)
{
ibm_rf_sen_model_err <- data.frame(
Trees=rep(1:nrow(ibm_rf_sen_model$err.rate),times=8),
Type =rep(c("OOB","ANALYTICAL","ANGRY","CONFIDENT","FEAR","JOY","SAD","TENTATIVE"),each=nrow(ibm_rf_sen_model$err.rate)),
Error = c(ibm_rf_sen_model$err.rate[,"OOB"],
ibm_rf_sen_model$err.rate[,"ANALYTICAL"],
ibm_rf_sen_model$err.rate[,"ANGRY"],
ibm_rf_sen_model$err.rate[,"CONFIDENT"],
ibm_rf_sen_model$err.rate[,"FEAR"],
ibm_rf_sen_model$err.rate[,"JOY"],
ibm_rf_sen_model$err.rate[,"SAD"],
ibm_rf_sen_model$err.rate[,"TENTATIVE"])
)
ggplot(data=ibm_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))
val <-  vector(length = 10)
for (i in 1:10) {
temp_model <-  randomForest(actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear,data = ibm_rf_sentence_train,ntree=1000,mtry=i)
val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}
val
}
# IBM Sentence Level Random Forest [MAIN EMOTIONS ONLY]
ibm_rf_sentence1 <-  document_detail_ibm_tbl1 %>% select(chatid,chatorder,score,tone_id) %>% pivot_wider(names_from = tone_id,values_from = score) %>% replace(.,is.na(.),0)  %>% group_by(chatid,chatorder) %>% summarise_all(sum) %>% inner_join(IBM_sen_T1 %>% rename(actualemotion=name),by = c("chatid"="chatid","chatorder"="chatorder"))
ibm_rf_sentence1 <- ibm_rf_sentence1 %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))
set.seed(500)
ibm_rf_sentence_train1 <- sample_n(ibm_rf_sentence1,size =as.integer(round(count(ibm_rf_sentence1)/2,0)),replace = T)
ibm_rf_sentence_test1 <- sample_n(ibm_rf_sentence1,size =as.integer(round(count(ibm_rf_sentence1)/2,0)),replace = T)
ibm_rf_sen_model1 <-  randomForest(actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear,data = ibm_rf_sentence_train1, proximity=T)
ibm_rf_sen_model1
ibm_rf_sentence_test_outcome1 <- predict(ibm_rf_sen_model1, ibm_rf_sentence_test1, type = "class")
table(ibm_rf_sentence_test_outcome1,ibm_rf_sentence_test1$actualemotion)
ibm_rf_sentence_test_result1 <- as.data.frame(table(ibm_rf_sentence_test_outcome1,factor(tolower(ibm_rf_sentence_test1$actualemotion)))) %>% rename(Prediction=ibm_rf_sentence_test_outcome1,Truth=Var2)
ibm_rf_sentence_test_result1 %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(ibm_rf_sentence_test_result1$Freq)))+
ggtitle(paste('IBM:RF SENTENCE CONFUSION MATRIX-USER , Error%=',round(1-mean(ibm_rf_sentence_test_outcome1 == ibm_rf_sentence_test1$actualemotion),2)))+
labs(subtitle = "actualemotion~analytical+tentative+joy+confident+sadness+anger+fear [4 MAIN EMOTIONS]")
if(FALSE)
{
ibm_rf_sen_model_err1 <- data.frame(
Trees=rep(1:nrow(ibm_rf_sen_model1$err.rate),times=5),
Type =rep(c("OOB","ANGRY","FEAR","JOY","SAD"),each=nrow(ibm_rf_sen_model1$err.rate)),
Error = c(ibm_rf_sen_model1$err.rate[,"OOB"],
ibm_rf_sen_model1$err.rate[,"ANGRY"],
ibm_rf_sen_model1$err.rate[,"FEAR"],
ibm_rf_sen_model1$err.rate[,"JOY"],
ibm_rf_sen_model1$err.rate[,"SAD"]))
ggplot(data=ibm_rf_sen_model_err1,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))
val <-  vector(length = 10)
for (i in 1:10) {
temp_model <-  randomForest(actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear,data = ibm_rf_sentence1, ntree=500,mtry=i)
val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}
val
}
}
# Chunk 13
if (DisplayAPISentimentCorrelation) {
all_corr <- document_detail_ibm_tbl1  %>% rename(emotion=tone_id) %>% mutate(emotion=paste("IBM",emotion)) %>%  select(chatid,chatorder,emotion,score) %>%
union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>% mutate(emotion=paste("PD",emotion))  %>% select(chatid,chatorder,emotion,score)) %>%
union(sentence_detail_ms_tbl %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = "emotion",values_to = "score")%>% mutate(emotion=paste("MS",emotion))  %>%select(chatid,chatorder,emotion,score)) %>%
group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score))%>% arrange(emotion) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>%
inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>%
inner_join(actual_All %>% select(-text,-user),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup() %>% select(-chatid,-chatorder)
prediction <- all_corr %>% select(-POSITIVE,-NEUTRAL,-NEGATIVE,-ANGRY,-SAD,-FEAR,-BORED,-EXCITED,-HAPPY,-CONFIDENT,-ANALYTICAL,-TENTATIVE)
reality <- all_corr %>% select(POSITIVE,NEUTRAL,NEGATIVE,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY,CONFIDENT,ANALYTICAL,TENTATIVE)
corr <- cor(reality, prediction)
corrplot(corr, method="circle")
}
# Chunk 14
if (PerformIRR) {
# Angry Comparision
kappa2(actual_IRR_ANA[,c("ANGRY_BP","ANGRY_MP")],weight = "equal")
kappa2(actual_IRR_ANA[,c("ANGRY_VA","ANGRY_MP")],weight = "equal")
kappa2(actual_IRR_ANA[,c("ANGRY_VA","ANGRY_BP")],weight = "equal")
# Happy Comparision
kappa2(actual_IRR_ANA[,c("HAPPY_BP","HAPPY_MP")],weight = "equal")
kappa2(actual_IRR_ANA[,c("HAPPY_VA","HAPPY_MP")],weight = "equal")
kappa2(actual_IRR_ANA[,c("HAPPY_VA","HAPPY_BP")],weight = "equal")
}
# Chunk 15
if (AngerHappinessRandomForest) {
formulae_A <- ANGRY_Lvl ~ angry+happy+Anger+Joy
formulae_H <- HAPPY_Lvl ~ angry+happy+Anger+Joy
AH_sen_T <-  actual_AH  %>% mutate(ANGRY_Lvl=round(ANGRY),HAPPY_Lvl=round(HAPPY))
AH_rf_sentence <- document_detail_ibm_tbl1 %>% select(-tone_id) %>%
pivot_wider(names_from = tone_name,values_from = score) %>%
inner_join(sentence_detail_pd_tbl %>% select(chatid,chatorder,happy,bored,sad,excited,fear,angry),by = c("chatid"="chatid","chatorder"="chatorder")) %>%
inner_join(sentence_detail_ms_tbl %>% select(chatid,positive,neutral,negative,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>%
replace(.,is.na(.),0) %>%
inner_join(AH_sen_T %>% select(chatid,chatorder,ANGRY_Lvl,HAPPY_Lvl),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()
AH_rf_sentence <- AH_rf_sentence %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(ANGRY_Lvl=as.factor(ANGRY_Lvl),HAPPY_Lvl=as.factor(HAPPY_Lvl))
set.seed(1000)
AH_rf_sentence_train <- sample_n(AH_rf_sentence,size =as.integer(round(count(AH_rf_sentence)/2,0)),replace = T)
AH_rf_sentence_test <- AH_rf_sentence#sample_n(AH_rf_sentence,size =as.integer(round(count(AH_rf_sentence)/2,0)),replace = T)
A_AH_rf_sen_model <-  randomForest(formulae_A,data = AH_rf_sentence_train, proximity=T,ntree=500)
H_AH_rf_sen_model <-  randomForest(formulae_H,data = AH_rf_sentence_train, proximity=T,ntree=500)
A_AH_rf_sen_model
A_AH_rf_sentence_test_outcome <- predict(A_AH_rf_sen_model, AH_rf_sentence_test %>% select(angry,happy,Anger,Joy), type = "class")
table(A_AH_rf_sentence_test_outcome,AH_rf_sentence_test$ANGRY_Lvl)
A_AH_rf_sentence_test_result <- as.data.frame(table(A_AH_rf_sentence_test_outcome,factor(tolower(AH_rf_sentence_test$ANGRY_Lvl)))) %>% rename(Prediction=A_AH_rf_sentence_test_outcome,Truth=Var2)
A_AH_rf_sentence_test_result %>% summarise(sum(Freq))
A_AH_rf_sentence_test_result %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(A_AH_rf_sentence_test_result$Freq)))+
ggtitle(paste('AH RF SENTENCE CONFUSION MATRIX-ANGER , Error%=',round(1-mean(A_AH_rf_sentence_test_outcome == AH_rf_sentence_test$ANGRY_Lvl),2)))+
labs(subtitle = "ANGER~SELECT VARIABLES FROM SELECT EMOTIONS FROM APIS")
if (FALSE)
{
A_AH_rf_sen_model_err <- data.frame(
Trees=rep(1:nrow(A_AH_rf_sen_model$err.rate),times=7),
Type =rep(c("OOB","0","1","2","3","","5"),each=nrow(A_AH_rf_sen_model$err.rate)),
Error = c(A_AH_rf_sen_model$err.rate[,"OOB"],
A_AH_rf_sen_model$err.rate[,"0"],
A_AH_rf_sen_model$err.rate[,"1"],
A_AH_rf_sen_model$err.rate[,"2"],
A_AH_rf_sen_model$err.rate[,"3"],
A_AH_rf_sen_model$err.rate[,"4"],
A_AH_rf_sen_model$err.rate[,"5"]))
ggplot(data=A_AH_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))
val <-  vector(length = 10)
for (i in 1:10) {
print(i)
temp_model <-  randomForest(formulae_A,data = AH_rf_sentence_train, ntree=500,mtry=i)
val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}
val
}
H_AH_rf_sen_model
H_AH_rf_sentence_test_outcome <- predict(H_AH_rf_sen_model, AH_rf_sentence_test, type = "class")
table(H_AH_rf_sentence_test_outcome,AH_rf_sentence_test$HAPPY_Lvl)
H_AH_rf_sentence_test_result <- as.data.frame(table(H_AH_rf_sentence_test_outcome,factor(tolower(AH_rf_sentence_test$HAPPY_Lvl)))) %>% rename(Prediction=H_AH_rf_sentence_test_outcome,Truth=Var2)
H_AH_rf_sentence_test_result %>% summarise(sum(Freq))
H_AH_rf_sentence_test_result %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
geom_tile(aes(fill = Freq),color="white") +
geom_text(color="black")+
scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(H_AH_rf_sentence_test_result$Freq)))+
ggtitle(paste('AH RF SENTENCE CONFUSION MATRIX-HAPPY , Error%=',round(1-mean(H_AH_rf_sentence_test_outcome == AH_rf_sentence_test$HAPPY_Lvl),2)))+
labs(subtitle = "actualemotion~SELECT VARIABLES FROM SELECT EMOTIONS FROM APIS")
if (FALSE)
{
H_AH_rf_sen_model_err <- data.frame(
Trees=rep(1:nrow(H_AH_rf_sen_model$err.rate),times=7),
Type =rep(c("OOB","0","1","2","3","","5"),each=nrow(H_AH_rf_sen_model$err.rate)),
Error = c(H_AH_rf_sen_model$err.rate[,"OOB"],
H_AH_rf_sen_model$err.rate[,"0"],
H_AH_rf_sen_model$err.rate[,"1"],
H_AH_rf_sen_model$err.rate[,"2"],
H_AH_rf_sen_model$err.rate[,"3"],
H_AH_rf_sen_model$err.rate[,"4"],
H_AH_rf_sen_model$err.rate[,"5"]))
ggplot(data=H_AH_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))
val <-  vector(length = 10)
for (i in 1:10) {
temp_model <-  randomForest(formulae_H,data = AH_rf_sentence_train, ntree=500,mtry=i)
val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}
val
}
AH_rf_sentence_result <- AH_rf_sentence_test %>% mutate(pred_Anger=A_AH_rf_sentence_test_outcome,pred_Happy=H_AH_rf_sentence_test_outcome)
}
# Chunk 16
if (Tokenise_IDF) {
tidy_data_bi_token <- actual_data %>%
unnest_tokens(multi_gram,text,token ="ngrams",n=2) %>%
separate(multi_gram,into = c("word1","word"),sep=" ") %>%
filter(!is.na(word),!grepl("[[:digit:]]",word))
data(stop_words)
tidy_data_bi_token <- tidy_data_bi_token %>%
anti_join(stop_words,by = c("word"="word"))
tidy_data_idf <-  tidy_data_bi_token %>% group_by(chatid,word) %>% count() %>% bind_tf_idf(word,chatid,n) %>% ungroup()
}
# Chunk 17
if (FromUIData) {
Aggregated_Result <-  AH_rf_sentence_result %>% select(-ANGRY_Lvl,-HAPPY_Lvl) %>% separate(col = chatid,into = c("chatid","chatorder"),convert = T) %>% right_join (AH_sen_T,by = c("chatid"="chatid","chatorder"="chatorder")) %>% rename(Model_Happy=pred_Happy,Model_Anger=pred_Anger,BenchMark_Anger=ANGRY_Lvl,BenchMark_Happy=HAPPY_Lvl)
}
# Chunk 18
if (SaveAggregatedResult) {
save(Aggregated_Result,file="Bkp\\Aggregated_Result.rda")
save(tidy_data_idf,file="Bkp\\tidy_data_idf.rda")
save(actual_data,file="Bkp\\actual_data.rda")
}
if (LoadAggregatedResult) {
load(file = "Bkp\\Aggregated_Result.rda")
load(file = "Bkp\\tidy_data_idf.rda")
load(file = "Bkp\\actual_data.rda")
}
# Chunk 19
chatid_list <- Aggregated_Result %>% distinct(chatid) %>% as.list()
# Chunk 20
ui <- shinyUI(
dashboardPage(
dashboardHeader(title = "MAD Dashboard"),
dashboardSidebar(
sidebarMenu(id="sidetabs",
menuItem("Chat Overview", tabName = "ChatOverviewScreen", icon = icon("columns")),
menuItem("Chat Details", tabName = "ChatDetailScreen", icon = icon("search")),
menuItem("Analyst Tab", tabName = "AnalystScreen", icon = icon("search")))
),
dashboardBody(
tabItems(
tabItem(tabName = "ChatOverviewScreen",
fluidRow(
column(dataTableOutput("ChatOverview"),width = 12))
),
tabItem(tabName = "ChatDetailScreen",
fluidRow(
selectInput("SelChat","Select Chat",chatid_list$chatid),
actionButton("Back",label = "Back")),
fluidRow(
column(plotlyOutput("CrossChat"),width = 6),
column(plotOutput("AngerVSHappy"),width = 3),
column(plotOutput("KeyWords"),width = 3)),
fluidRow(
column(dataTableOutput("ChatDetail"),width = 12))
),
tabItem(tabName = "AnalystScreen",
fluidRow(
column(selectInput("SelDeepChat","Select Chat",chatid_list$chatid),width = 4),
column(selectInput("SelDeepChatOrder","Select Chat Order",choices = c(1:1)),width = 4)
),
fluidRow(actionButton("BackDeep",label = "Back")),
fluidRow(
column(dataTableOutput("AnalystOverview"),width = 12))
)
)
)
)
)
server <- shinyServer(function(input,output,session){
output$ChatOverview <- renderDataTable({
slope_est <- Aggregated_Result %>%
select(chatid,chatorder,Model_Anger) %>% mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger]) %>%
filter(!is.na(Model_Anger) & Model_Anger>0) %>% group_by(chatid) %>% filter(n()>1) %>% nest() %>%
mutate(model = map(data, ~lm( Model_Anger~chatorder, data = .) %>% tidy)) %>% unnest(model) %>%
filter(term=="chatorder") %>% select(chatid,estimate) %>% rename(Rage_Rate=estimate) %>% mutate(Rage_Rate=Rage_Rate*100)
Aggregated_Result %>%
select(chatid,chatorder,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(!is.na(Model_Anger) | !is.na(Model_Happy)) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>% summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy),chat_length=max(chatorder)) %>%
mutate(Tot=Anger+Happy,Anger_Percent=round(Anger/Tot*100,0),Happiness_Percent=round(Happy/Tot*100)) %>%
left_join(slope_est,by=c("chatid"="chatid")) %>%
inner_join(Aggregated_Result %>% filter(user!="Bot") %>% distinct(chatid,user),by = c("chatid"="chatid")) %>%
mutate(Rage_Rate=if_else(is.na(Rage_Rate),-999,round(Rage_Rate,2)), Warning = if_else((Rage_Rate>3.9 & Anger_Percent>50) | (is.na(Rage_Rate)& Anger_Percent>50) | (Anger_Percent>50 | Rage_Rate>3.9),"Yes","No")) %>%
mutate(Rage_Rate=replace(Rage_Rate,Rage_Rate==-999,NA),Rage_Rate=replace(Rage_Rate,Rage_Rate<0.09,"Negligable")) %>%
select(chatid,user,chat_length,Anger_Percent,Happiness_Percent,Rage_Rate,Warning)  },escape = F#,selection ='single'
,callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectrows',
table.rows('.selected').data()[0][0]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == "Yes") $("td", row).css("background", "lightsalmon");}'))
)
observeEvent(input$selectrows, {
updateSelectInput(session,inputId = "SelChat",selected = trimws(input$selectrows))
#updateTabsetPanel(session,inputId = "ChatDetailScreen", selected = "ChatDetailScreen")
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$ChatDetail <- renderDataTable({
Aggregated_Result %>% select(chatid,user,chatorder,text,BenchMark_Anger,BenchMark_Happy,Model_Anger,Model_Happy) %>% filter(chatid==input$SelChat) },escape = F,
callback = "function(table) {
table.on('click.dt', 'tr', function() {
table.$('tr.selected').removeClass('selected');
$(this).toggleClass('selected');
Shiny.onInputChange('selectchatid',
table.rows('.selected').data()[0][0]);
Shiny.onInputChange('selectchatorder',
table.rows('.selected').data()[0][2]);
});
}"
,options = list(rowCallback=I( 'function(row, data) { if (data[6] == 4 | data[6] == 5) $("td", row).css("background", "Tomato");else if (data[6] == 2 | data[6] == 3) $("td", row).css("background", "lightsalmon");else if (data[6] == 1) $("td", row).css("background", "pink");}'))
)
observeEvent(input$Back,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatOverviewScreen" )
})
output$CrossChat <- renderPlotly({
CrossChat_graph <- Aggregated_Result %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
select(chatorder,Model_Anger,Model_Happy) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy],Model_Anger=Model_Anger * (-1)) %>%
ggplot() +
geom_line(mapping =  aes(x=chatorder,y=Model_Anger),size=1,color="red")+
geom_line(mapping =  aes(x=chatorder,y=Model_Happy),size=1,color="green")+
geom_point(mapping =  aes(x=chatorder,y=Model_Anger),color='tomato')+
geom_point(mapping =  aes(x=chatorder,y=Model_Happy),color='yellowgreen')+
geom_hline(yintercept =0,color="black",size=1)+
ggplot2::annotate("text",x=3,y=5, label= "Happiness",color="springgreen3")+
ggplot2::annotate("text",x=3,y=-5, label= "Anger",color="tomato")+
labs(x = "Chat Order", y = "Emotion")+
scale_y_continuous(breaks=seq(-5,5,1))+
scale_x_continuous(breaks=seq(-5,Aggregated_Result %>% filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
summarise(max(chatorder)) %>% as.integer(),1))+
ggtitle("CROSS CHAT SCORES")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
ggplotly(CrossChat_graph)
})
output$AngerVSHappy <- renderPlot({
Aggregated_Result %>%
select(chatid,Model_Anger,Model_Happy) %>%
filter(chatid==input$SelChat & ( !is.na(Model_Anger) | !is.na(Model_Happy))) %>%
mutate(Model_Anger=as.numeric(levels(Model_Anger))[Model_Anger],Model_Happy=as.numeric(levels(Model_Happy))[Model_Happy]) %>%
group_by(chatid) %>%
summarise(Anger=sum(Model_Anger),Happy=sum(Model_Happy)) %>%
mutate(Tot=Anger+Happy,Anger=Anger/Tot,Happy=Happy/Tot) %>%
pivot_longer(c("Anger","Happy"),names_to = "Emotion",values_to = "Percent") %>%
ggplot()+
geom_bar(aes(x=Emotion,y=Percent,fill=Emotion),stat="identity",show.legend = F)+
geom_text(aes(x=Emotion,y = Percent/1.1,label=paste(round(Percent*100,2),"%")),size=7 )+
coord_flip()+
ggtitle("Happiness VS Anger")+
theme_classic()+
theme(  panel.background = element_rect(fill = "aliceblue"))
})
output$KeyWords <- renderPlot({
wordcloud(words = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$word, freq = tidy_data_idf %>% filter(chatid==input$SelChat) %>% .$tf_idf, min.freq = 1,max.words=30, random.order=FALSE, rot.per=0, colors=brewer.pal(5, "Dark2"),scale = c(2,1))+title((main = list("KEY WORDS", cex = 1.5, font = 20)))
})
observeEvent(input$selectchatorder, {
updateSelectInput(session,inputId = "SelDeepChat",selected = trimws(input$selectchatid))
updateSelectInput(session,inputId = "SelDeepChatOrder",choices = Aggregated_Result %>% filter(chatid==trimws(input$selectchatid)) %>% select(chatorder) %>% as.list(),selected = trimws(input$selectchatorder))
updateTabItems(session,inputId ="sidetabs",selected = "AnalystScreen" )
})
observeEvent(input$BackDeep,{
updateTabItems(session,inputId ="sidetabs",selected = "ChatDetailScreen" )
})
output$AnalystOverview <- renderDataTable({
Aggregated_Result %>% select(chatid,chatorder,angry,Anger,happy,Joy) %>%
rename(ParalleDot_Anger=angry,IBM_Anger=Anger,ParalleDot_Happy=happy,IBM_Happy=Joy)  %>%
filter(chatid==input$SelDeepChat,chatorder==input$SelDeepChatOrder)
})
})
shinyApp(ui = ui, server = server)
