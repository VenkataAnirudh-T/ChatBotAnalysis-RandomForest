---
title: "Test API"
output: html_document
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
#install.packages("unpivotr")
library(tidyverse) 
library(httr)
library(jsonlite)
library(tidyverse)
library(dplyr)
library(tidytext)
library(ggplot2)
library(unpivotr)
library(randomForest)
library(corrplot)
library(corrr)
```

# IBM TONE ANALYZER API CALLS
```{r}
#Import
actual_data <- read.csv("controlset.csv",encoding = "UTF-8")

#Load to tibble
actual_data <-  as.tibble(actual_data)

#Clean up
actual_data <- actual_data %>% rename(chatid=`X.U.FEFF.chatid`)

actual_data_user <- actual_data %>% filter(user!="Bot") %>% arrange(chatid,chatorder)

chat_ids <- actual_data_user %>% distinct(chatid)

error <- NULL
log <- NULL
sentence_detail_ibm_tbl <- NULL
document_detail_ibm_tbl <- NULL

for(chat_id in unlist(chat_ids))
{
  log <- paste(log,chat_id,";")
  temp_chat <- actual_data_user %>% ungroup() %>% filter(chatid==chat_id)  %>% select(text)
  conv <- paste( unlist(temp_chat), collapse='')
  conv <- conv %>% tolower()
  res <-  GET("https://api.us-south.tone-analyzer.watson.cloud.ibm.com/instances/ae35ff46-9c62-4702-8fac-7436e439e518/v3/tone",
    authenticate("apikey" ,"b47XSqEVQz2waukJGTjlVXwbzJjyxZ2YHeBqQFFi0Aql"),
    query = list(version="2017-09-21",
                 text=conv),
    accept_json())
  if(res$status_code == 200)
  {
    output <-  content(res)
    document_details <- output$document_tone$tones
    if(!is.null(document_details))
    {
      temp_document_tbl <- tibble(chatid = chat_id)  %>%  crossing(bind_rows(document_details))
      document_detail_ibm_tbl <- document_detail_ibm_tbl %>% rbind(temp_document_tbl)
    }
    sentence_details <- output$sentences_tone
    if(!is.null(sentence_details))
    {
      for(sentence in c(1:length(sentence_details)) )
      {
        temp_sentence_tbl <- tibble(chatid = chat_id,sentenceid=sentence_details[[sentence]]$sentence_id,
                text=sentence_details[[sentence]]$text) %>%  crossing(bind_rows(sentence_details[[sentence]]$tones))
        sentence_detail_ibm_tbl <- sentence_detail_ibm_tbl %>% rbind(temp_sentence_tbl)
      }
    }
  }
  else
  {
    error <- paste(error,chat_id,"=",res$status_code,";")
  }
}
document_detail_ibm_tbl
sentence_detail_ibm_tbl

document_detail_ibm_tbl %>% mutate(chat_id=as.factor(chatid)) %>% 
  filter(!(tone_name %in% c("Tentative","Analytical","Confident"))) %>% 
  ggplot(aes(x=chatid,y=score,fill=tone_name)) + geom_col() + facet_wrap(~chat_id)

sentence_detail_ibm_tbl %>% 
  filter(!(tone_name %in% c("Tentative","Analytical","Confident"))) %>% 
  mutate(chatid=as.factor(chatid)) %>% 
  group_by(chatid,tone_name) %>% 
  summarise(value=sum(score)) %>% ungroup() %>% ggplot() + geom_col(aes(x=chatid,y=value,fill=tone_name))

sentence_detail_ibm_tbl %>% 
  filter(chatid==12) %>% 
  filter(!(tone_name %in% c("Tentative","Analytical","Confident"))) %>% 
  ggplot(aes(x=sentenceid,y=score,color=tone_name))+ geom_line() +geom_point() + facet_wrap(~tone_name)

```

```{r}
error <- NULL
    log <- NULL
    sentence_detail_ibm_tbl1 <- NULL
    document_detail_ibm_tbl1 <- NULL
    
for(chat_id in unlist(distinct(actual_data_user,chatid)))
{
  for(chat_order in unlist(distinct(actual_data_user %>% filter(chatid==chat_id),chatorder)))
  {
    conv <- actual_data %>% filter(chatid==chat_id,chatorder==chat_order) %>% mutate(text=as.character(text)) %>%  select(text)
    res <-  GET("https://api.us-south.tone-analyzer.watson.cloud.ibm.com/instances/ae35ff46-9c62-4702-8fac-7436e439e518/v3/tone",
    authenticate("apikey" ,"b47XSqEVQz2waukJGTjlVXwbzJjyxZ2YHeBqQFFi0Aql"),
    query = list(version="2017-09-21",
                 text=conv),
    accept_json())
    
    if(res$status_code == 200)
    {
      output <-  content(res)
      document_details <- output$document_tone$tones
      if(!is.null(document_details))
      {
        temp_document_tbl <- tibble(chatid = chat_id,chatorder=chat_order)  %>%  crossing(bind_rows(document_details))
        document_detail_ibm_tbl1 <- document_detail_ibm_tbl1 %>% rbind(temp_document_tbl)
      }
      sentence_details <- output$sentences_tone
      if(!is.null(sentence_details))
      {
        for(sentence in c(1:length(sentence_details)) )
        {
          temp_sentence_tbl <- tibble(chatid = chat_id,chatorder=chat_order,sentenceid=sentence_details[[sentence]]$sentence_id,
                  text=sentence_details[[sentence]]$text) %>%  crossing(bind_rows(sentence_details[[sentence]]$tones))
          sentence_detail_ibm_tbl1 <- sentence_detail_ibm_tbl1 %>% rbind(temp_sentence_tbl)
        }
      }
    }
    else
    {
      error <- paste(error,chat_id,"=",res$status_code,";")
    }

  }
}
```


# MS - TEXT ANALYZER API CALLS
```{r}
jsn <-  actual_data_user %>% ungroup()  %>% mutate(id=paste(chatid,chatorder,sep = "_")) %>%  select(id,text) %>%  nest(data=c(id,text)) %>% rename(documents=data)  %>% toJSON()
 
jsn1 <- gsub('\\[\\{\\"d','{"d',jsn)
jsn2 <- gsub('\\}\\]\\}\\]','}]}',jsn1)
jsn3 <- gsub('\\\\\"','heyyyy',jsn2) # removing \" from json

auth_header <- httr::add_headers('Ocp-Apim-Subscription-Key'='3247f835c0e1475ca35a25e21c200e88')
res <-  POST("https://eastus.api.cognitive.microsoft.com/text/analytics/v3.0-preview.1/sentiment/",
    auth_header,
    encode ="raw",
    body = jsn3)


output2 <- content(res) 

sentence_detail_ms_tbl <- NULL

for(docid in c(1:length(output2$documents)))
{
  document_detail_temp <- tibble(id=output2$documents[[docid]]$id,
                                 overall_sentiment=output2$documents[[docid]]$sentiment,
                                 ) %>% crossing(bind_rows(output2$documents[[docid]]$documentScores))
  sentence_detail_ms_tbl <- sentence_detail_ms_tbl %>% rbind(document_detail_temp)
}

sentence_detail_ms_tbl <- sentence_detail_ms_tbl %>% separate(id,into = c("chatid","sentenceid")) %>% mutate(chatid=as.numeric(chatid),sentenceid=as.numeric(sentenceid))

sentence_detail_ms_tbl %>% inner_join(actual_data,by = c("chatid"="chatid","sentenceid"="chatorder")) %>% select(chatid,sentenceid,text,overall_sentiment,positive,neutral,negative)

sentence_detail_ms_tbl %>% 
  pivot_longer(cols = c(positive,neutral,negative),names_to = "Sentiment") %>% 
  filter(chatid==12) %>% 
  ggplot(aes(x=sentenceid,y=value,color=Sentiment)) +
  geom_line()+
  facet_wrap(~Sentiment)

document_detail_ms_tbl <- sentence_detail_ms_tbl %>% group_by(chatid) %>% summarise(positive=sum(positive),neutral=sum(neutral),negative=sum(negative))


document_detail_ms_tbl %>% mutate(chatid=as.factor(chatid)) %>% pivot_longer(cols = c(positive,neutral,negative),names_to = "Sentiment") %>% ggplot() + geom_col(aes(x=chatid,y=value,fill=Sentiment))

document_detail_ms_tbl %>% pivot_longer(cols = c(positive,neutral,negative),names_to = "Sentiment") %>% group_by(chatid) %>% arrange(chatid,desc(value)) %>% top_n(1) %>% ungroup() %>% arrange(Sentiment)
```
# PARALLEL DOT API CALL
```{r}
data_used <- actual_data_user %>% filter(chatid %in% c(12,3,7,5,1))  %>% mutate(idx=row_number())

data_used <- actual_data_user   %>% mutate(idx=row_number())

array_tibble <- data_used %>% filter(chatid %in% c(1)) %>%  arrange(idx) %>%  select(text) %>% mutate(text=gsub('"', '', text)) %>%  mutate(text=paste('"',text,'"')) 

input_array <-   paste( unlist(array_tibble), collapse=',')
input_array <-  paste("[",input_array,"]")

form_body <- list(text=input_array,
                  api_key="eAWtYDkAFSnBPGtGsaUbXUt8riNE3ra42PKVZVbazVc")

res <-  POST("https://apis.paralleldots.com/v4/emotion_batch",
    encode = "form",
    body = form_body)

output3 <- content(res)
sentence_detail_pd_tbl <- NULL

for (sentence in c(1:length(output3$emotion))) {
  sentence_detail_temp <- tibble(happy = output3$emotion[[sentence]]$Happy,
                                 bored = output3$emotion[[sentence]]$Bored,
                                 sad = output3$emotion[[sentence]]$Sad,
                                 excited = output3$emotion[[sentence]]$Excited,
                                 fear = output3$emotion[[sentence]]$Fear,
                                 angry = output3$emotion[[sentence]]$Angry,
                                 idx=sentence
                                 )
  sentence_detail_pd_tbl <- sentence_detail_pd_tbl %>% rbind(sentence_detail_temp)
}
sentence_detail_pd_tbl <- sentence_detail_pd_tbl %>% mutate(idx=row_number())
sentence_detail_pd_tbl <- data_used %>% inner_join(sentence_detail_pd_tbl,by = c("idx","idx"))

sentence_detail_pd_tbl %>% filter(chatid==12) %>%  
  pivot_longer(cols = c("happy","bored","sad","excited","fear","angry")) %>% 
  ggplot(aes(x=chatorder,y=value,color=name))+
  geom_line()+
  geom_point()+
  facet_wrap(~name)

sentence_detail_pd_tbl %>% pivot_longer(cols = c("happy","bored","sad","excited","fear","angry")) %>% 
  mutate(chatid=as.factor(chatid)) %>% 
  group_by(chatid,name) %>% 
  summarise(value=sum(value)) %>% 
  ggplot()+
  geom_col(aes(x=chatid,y=value,fill=name))


  
         
```
# OVERALL GRAPHS
```{r}
sentence_detail_pd_tbl %>% 
  group_by(chatid) %>% 
  summarise(happy=sum(happy),sad=sum(sad),fear=sum(fear),angry=sum(angry),bored=sum(bored),excited=sum(excited)) %>%  #"happy","bored","sad","excited","fear","angry"
  mutate(tot=happy+sad+fear+angry+bored+excited) %>% #for percent
  ungroup() %>% 
  pivot_longer(cols = c("happy","sad","fear","angry","excited","bored")) %>% 
  mutate(value=value/tot) %>%  #for percent
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>%
  mutate(name = factor(name,levels = c("angry","sad","fear","happy","excited","bored"))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=name,label=round(value,2)))+
  geom_col()+
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1,label=truth))+
  ggtitle('PARALLEL DOTS : OVERALL CHAT EMOTIONS')+
  coord_flip()

sentence_detail_pd_tbl %>% 
  group_by(chatid) %>% 
  summarise(happy=sum(happy),sad=sum(sad),fear=sum(fear),angry=sum(angry)) %>%  #"happy","bored","sad","excited","fear","angry"
  mutate(tot=happy+sad+fear+angry) %>% #for percent
  ungroup() %>% 
  pivot_longer(cols = c("happy","sad","fear","angry")) %>% 
  mutate(value=value/tot) %>%  #for percent
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>%
  mutate(name = factor(name,levels = c("angry","sad","fear","happy"))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=name,label=round(value,2)))+
  geom_col()+
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1,label=truth))+
  ggtitle('PARALLEL DOTS : OVERALL CHAT EMOTIONS')+
  coord_flip()

sentence_detail_pd_tbl %>% filter(chatid==11) %>%  
  pivot_longer(cols = c("happy","bored","sad","excited","fear","angry")) %>% 
  ggplot(aes(x=chatorder,y=value,color=name))+
  geom_line()+
  geom_point()+
  facet_wrap(~name)+
  ggtitle('PARALLEL DOTS : CROSS CHAT EMOTION VARIATION')

document_detail_ms_tbl  %>%  mutate(chatid=as.factor(chatid),tot=positive+negative+neutral) %>%
  pivot_longer(cols = c(positive,neutral,negative),names_to = "Sentiment") %>% 
  mutate(value=value/tot) %>% 
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=Sentiment,label=round(value,2))) + geom_col()+
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1.2,label=truth))+
  ggtitle('MS - TEXT ANALYZER : OVERALL CHAT EMOTIONS')+
  coord_flip()

document_detail_ms_tbl  %>%  mutate(chatid=as.factor(chatid),tot=positive+negative) %>%
  pivot_longer(cols = c(positive,negative),names_to = "Sentiment") %>% 
  mutate(value=value/tot) %>% 
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=Sentiment,label=round(value,2))) + geom_col()+
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1.2,label=truth))+
  ggtitle('MS - TEXT ANALYZER : OVERALL CHAT EMOTIONS')+
  coord_flip()

sentence_detail_ms_tbl %>% 
  pivot_longer(cols = c(positive,neutral,negative),names_to = "Sentiment") %>% 
  filter(chatid==1) %>% 
  ggplot(aes(x=sentenceid,y=value,color=Sentiment)) +
  geom_line()+
  facet_wrap(~Sentiment) +
  ggtitle('MS - TEXT ANALYZER : CROSS CHAT EMOTION VARIATION')


document_detail_ibm_tbl %>% mutate(chatid=as.factor(chatid)) %>% 
  filter(tone_name %in% c("Anger","Sadness","Joy")) %>%  #"Anger","Joy","Sadness","Tentative","Confident","Analytical"
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>% 
  mutate(tone_name = factor(tone_name,levels = c("Anger","Sadness","Joy"))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=score,fill=tone_name,label=round(score,2))) + geom_col() +
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1,label=truth))+
  ggtitle('IBM - TONE ANALYZER : OVERALL CHAT EMOTIONS')+
  coord_flip()

sentence_detail_ibm_tbl_grph <- sentence_detail_ibm_tbl %>%
  pivot_wider(names_from = tone_name,values_from = score ) %>% 
  replace(.,is.na(.),0) %>% 
  group_by(chatid) %>% 
  summarise(Analytical=sum(Analytical), Sadness=sum(Sadness), Confident=sum(Confident),   Joy=sum(Joy), Tentative=sum(Tentative), Anger=sum(Anger),  Fear=sum(Fear))


sentence_detail_ibm_tbl_grph %>% 
  mutate(tot=Analytical +Sadness+ Confident+Joy+ Tentative+ Anger+Fear) %>% 
  pivot_longer(cols = c("Anger","Joy","Sadness","Tentative","Confident","Analytical","Fear")) %>% 
  mutate(value = value/tot) %>% 
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>% 
  mutate(name = factor(name,levels = c("Anger","Sadness","Fear","Joy","Tentative","Confident","Analytical"))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=name,label=round(value,2))) + geom_col() +
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1,label=truth))+
  ggtitle('IBM - TONE ANALYZER : OVERALL CHAT EMOTIONS')+
  coord_flip()

sentence_detail_ibm_tbl_grph %>% 
  mutate(tot=Sadness+Joy+ Anger+Fear) %>% 
  pivot_longer(cols = c("Anger","Joy","Sadness","Fear")) %>% 
  mutate(value = value/tot) %>% 
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>% 
  mutate(name = factor(name,levels = c("Anger","Sadness","Fear","Joy"))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=name,label=round(value,2))) + geom_col() +
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1,label=truth))+
  ggtitle('IBM - TONE ANALYZER : OVERALL CHAT EMOTIONS')+
  coord_flip()

sentence_detail_ibm_tbl %>% 
  filter(chatid==12) %>% 
  ggplot(aes(x=sentenceid,y=score,color=tone_name))+ geom_line() +geom_point() + facet_wrap(~tone_name) +
  ggtitle('IBM - TONE ANALYZER : CROSS CHAT EMOTION VARIATION')

```
#Read Survey Data
```{r}
actual_PD <- read.csv("ParallelBenchMark.csv",encoding = "UTF-8")
actual_PD <- actual_PD %>% rename(chatid=`X.U.FEFF.chatid`)
actual_MS <- read.csv("MSBenchMark.csv",encoding = "UTF-8")
actual_MS <- actual_MS %>% rename(chatid=`X.U.FEFF.chatid`)
actual_IBM <- read.csv("IBMBenchMark.csv",encoding = "UTF-8")
actual_IBM <- actual_IBM %>% rename(chatid=`X.U.FEFF.chatid`)
actual_All <- read.csv("AllBenchMark.csv",encoding = "UTF-8")
actual_All <- actual_All %>% rename(chatid=`X.U.FEFF.chatid`)

actual_PD %>% rename(angry=ANGRY,sad=SAD,fear=FEAR,happy=HAPPY,excited=EXCITED,bored=BORED) %>%  select(-excited,-bored) %>%  #"happy","bored","sad","excited","fear","angry"
  mutate(tot=happy+sad+fear+angry) %>% #for percent
  pivot_longer(cols = c("happy","sad","fear","angry")) %>% 
  mutate(value=value/tot) %>%  #for percent
  replace(.,is.na(.),0) %>% 
  group_by(chatid,name) %>% 
  summarise(value=mean(value)) %>% 
  mutate(truth=if_else(chatid %in% c(1,2,4),"nuetral",ifelse(chatid %in% c(5,9,10),"happy","angry"))) %>% 
  mutate(truth_int=if_else(chatid %in% c(1,2,4),2,ifelse(chatid %in% c(5,9,10),1,3))) %>% 
  ungroup() %>% 
  mutate(name = factor(name,levels = c("angry","sad","fear","happy"))) %>% 
  ggplot(aes(x=reorder(chatid,truth_int),y=value,fill=name,label=round(value,2)))+
  geom_col()+
  geom_text(size = 4, position = position_stack(vjust = 0.5))+
  geom_text(aes(x=reorder(chatid,truth_int),y=1,label=truth))+
  ggtitle('PARALLEL DOTS REAL EMOTION : OVERALL CHAT EMOTIONS')+
  coord_flip()

```
#OverAll Confusion Matrix
```{r}
PD_T <-  actual_PD %>% filter(user != "Bot") %>% group_by(chatid) %>% summarise(ANGRY=sum(ANGRY),SAD=sum(SAD), FEAR=sum(FEAR), BORED=sum(BORED), EXCITED=sum(EXCITED), HAPPY=sum(HAPPY))  %>% pivot_longer(cols = c("ANGRY","SAD","FEAR","BORED","EXCITED","HAPPY")) %>% group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

PD_T <- PD_T %>% ungroup() %>%  add_row(chatid=13,name="fear",value=1)

PD <- sentence_detail_pd_tbl  %>% group_by(chatid) %>% summarise(happy=sum(happy), bored=sum(bored),sad=sum(sad),excited=sum(excited),fear=sum(fear),angry=sum(angry)) %>% pivot_longer(cols = c("angry","fear","bored","excited","happy")) %>% group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1)

PD <- PD %>% ungroup() %>%  add_row(chatid=13,name="sad",value=1)

confusion_PD <- as.data.frame(table(factor(PD$name),factor(tolower(PD_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_PD %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white")+
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_PD$Freq)))+
  ggtitle('PARALLEL DOTS : OVERALL CONFUSION MATRIX')

confusionMatrix(data = factor(PD$name),reference = factor(tolower(PD_T$name)))

MS_T <- actual_MS %>% filter(user != "Bot") %>% group_by(chatid) %>% summarise(POSITIVE=sum(POSITIVE), NEUTRAL=sum(NEUTRAL), NEGATIVE=sum(NEGATIVE)) %>% pivot_longer(cols = c("POSITIVE","NEUTRAL","NEGATIVE")) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

MS <- document_detail_ms_tbl %>% pivot_longer(cols = c("positive","neutral","negative")) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

confusion_MS <- as.data.frame(table(factor(MS$name),factor(tolower(MS_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_MS %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white")+
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_MS$Freq)))+
  ggtitle('MS : OVERALL CONFUSION MATRIX')

confusionMatrix(data = factor(MS$name),reference = factor(tolower(MS_T$name)))

IBM_T <- actual_IBM %>%  filter(user != "Bot") %>% group_by(chatid) %>% summarise(ANGRY=sum(ANGRY),SAD=sum(SAD),JOY=sum(JOY),CONFIDENT=sum(CONFIDENT),ANALYTICAL=sum(ANALYTICAL),TENTATIVE=sum(TENTATIVE),FEAR=sum(FEAR)) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","CONFIDENT","ANALYTICAL","TENTATIVE","FEAR")) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

IBM_T <- IBM_T %>% ungroup()%>%  filter( !(chatid==7 & name=="CONFIDENT"))

IBM <- sentence_detail_ibm_tbl_grph %>% rename(analytical=Analytical,sad=Sadness,confident=Confident,joy=Joy,tentative=Tentative,angry=Anger,fear=Fear) %>%  pivot_longer(cols = c("angry","sad","joy","confident","analytical","tentative","fear")) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

IBM <- IBM %>% ungroup() %>% add_row(chatid=13,name="tentative",value=0.1)
IBM_T <- IBM_T %>% ungroup() %>% add_row(chatid=13,name="tentative",value=0.1)

confusion_IBM <- as.data.frame(table(factor(IBM$name),factor(tolower(IBM_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_IBM %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white")+
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_IBM$Freq)))+
  ggtitle('IBM : OVERALL CONFUSION MATRIX')

confusionMatrix(data = factor(IBM$name),reference = factor(tolower(IBM_T$name)))

IBM_T1 <- actual_IBM %>%  filter(user != "Bot") %>% group_by(chatid) %>% summarise(ANGRY=sum(ANGRY),SAD=sum(SAD),JOY=sum(JOY),CONFIDENT=sum(CONFIDENT),ANALYTICAL=sum(ANALYTICAL),TENTATIVE=sum(TENTATIVE),FEAR=sum(FEAR)) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","CONFIDENT","ANALYTICAL","TENTATIVE","FEAR")) %>% filter(name!="CONFIDENT",name!="ANALYTICAL",name!="TENTATIVE" ) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

IBM1 <- sentence_detail_ibm_tbl_grph %>% rename(analytical=Analytical,sad=Sadness,confident=Confident,joy=Joy,tentative=Tentative,angry=Anger,fear=Fear) %>%  pivot_longer(cols = c("angry","sad","joy","confident","analytical","tentative","fear")) %>% filter(name!="confident",name!="analytical",name!="tentative" ) %>%  group_by(chatid) %>% arrange(chatid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) 

confusion_IBM1 <- as.data.frame(table(factor(IBM1$name),factor(tolower(IBM_T1$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_IBM1 %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white")+
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_IBM1$Freq)))+
  ggtitle('IBM : OVERALL CONFUSION MATRIX')

#confusionMatrix(data = factor(IBM1$name),reference = factor(tolower(IBM_T1$name)))

```
# Sentence Level Conufusion Matrix
```{r}
PD_sen_T <- actual_PD %>% filter(user != "Bot") %>%  select(chatid,chatorder,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY) %>% pivot_longer(cols = c("ANGRY","SAD","FEAR","BORED","EXCITED","HAPPY")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()

PD_sen <- sentence_detail_pd_tbl %>% select(chatid,chatorder,happy,bored,sad,excited,fear,angry) %>% pivot_longer(cols = c("happy","bored","sad","excited","fear","angry")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()

PD_sen <- PD_sen %>% inner_join(PD_sen_T %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))

confusion_sentence_PD <- as.data.frame(table(factor(PD_sen$name),factor(tolower(PD_sen_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_sentence_PD %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white")+
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_PD$Freq)))+
  ggtitle('PARALLEL DOTS : SENTENCE CONFUSION MATRIX')

#confusionMatrix(data = factor(PD$name),reference = factor(tolower(PD_T$name)))

MS_sen_T <- actual_MS %>% filter(user != "Bot") %>%  select(chatid,chatorder,POSITIVE,NEUTRAL,NEGATIVE) %>% pivot_longer(cols = c("POSITIVE","NEUTRAL","NEGATIVE")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()

MS_sen <- sentence_detail_ms_tbl %>% select(chatid,sentenceid,positive,neutral,negative) %>% pivot_longer(cols = c("positive","neutral","negative")) %>% group_by(chatid,sentenceid) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()

MS_sen <- MS_sen %>% inner_join(MS_sen_T %>% select(chatid,chatorder),by = c("chatid"="chatid","sentenceid"="chatorder"))

confusion_sentence_MS <- as.data.frame(table(factor(MS_sen$name),factor(tolower(MS_sen_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_sentence_MS %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white") +
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_MS$Freq)))+
  ggtitle('MS : SENTENCE CONFUSION MATRIX')

confusionMatrix(data = factor(MS_sen$name),reference = factor(tolower(MS_sen_T$name)))

IBM_sen_T <- actual_IBM %>% filter(user != "Bot") %>%  select(chatid,chatorder,ANGRY,SAD,JOY,CONFIDENT,ANALYTICAL,TENTATIVE,FEAR) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","CONFIDENT","ANALYTICAL","TENTATIVE","FEAR")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()

IBM_sen <- document_detail_ibm_tbl1  %>% group_by(chatid,chatorder) %>% arrange(desc(score), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup() 

IBM_sen <- IBM_sen %>% inner_join(IBM_sen_T %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))
IBM_sen_T <- IBM_sen_T %>% inner_join(IBM_sen %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))

confusion_sentence_IBM <- as.data.frame(table(factor(tolower(IBM_sen$tone_name)),factor(tolower(IBM_sen_T$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_sentence_IBM %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white") +
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_IBM$Freq)))+
  ggtitle('IBM : SENTENCE CONFUSION MATRIX')

confusionMatrix(data = factor(MS_sen$name),reference = factor(tolower(MS_sen_T$name)))

IBM_sen_T1 <- actual_IBM %>% filter(user != "Bot") %>%  select(chatid,chatorder,ANGRY,SAD,JOY,FEAR) %>% pivot_longer(cols = c("ANGRY","SAD","JOY","FEAR")) %>% group_by(chatid,chatorder) %>% arrange(desc(value), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup()

IBM_sen1 <- document_detail_ibm_tbl1 %>% filter(tone_name %in% c("Anger","Sadness","Joy","Fear"))  %>% group_by(chatid,chatorder) %>% arrange(desc(score), .by_group=T ) %>% top_n(1) %>% filter(n()==1) %>% ungroup() 

IBM_sen1 <- IBM_sen1 %>% inner_join(IBM_sen_T1 %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))
IBM_sen_T1 <- IBM_sen_T1 %>% inner_join(IBM_sen1 %>% select(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder"))

confusion_sentence_IBM1 <- as.data.frame(table(factor(tolower(IBM_sen1$tone_name)),factor(tolower(IBM_sen_T1$name)))) %>% rename(Prediction=Var1,Truth=Var2)

confusion_sentence_IBM1 %>% ggplot(aes(x = Prediction,y = Truth,label=Freq)) +
  geom_tile(aes(fill = Freq),color="white") +
  geom_text(color="black")+
  scale_fill_gradient(low="yellow1", high="springgreen2", limits=c(1, max(confusion_sentence_IBM1$Freq)))+
  ggtitle('IBM : SENTENCE CONFUSION MATRIX')

confusionMatrix(data = factor(MS_sen1$name),reference = factor(tolower(MS_sen_T1$name)))

```
# Sentence level Random Forest
```{r}

#Parallel Dots
pd_rf_sentence <-  sentence_detail_pd_tbl %>% select(chatid,chatorder,happy,bored,sad,excited,fear,angry) %>% inner_join(PD_sen_T %>% rename(actualemotion=name)) 

pd_rf_sentence <- pd_rf_sentence %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

pd_rf_sen_model <-  randomForest(actualemotion ~ happy+bored+sad+excited+fear+angry,data = pd_rf_sentence, proximity=T)

pd_rf_sen_model_err <- data.frame(
  Trees=rep(1:nrow(pd_rf_sen_model$err.rate),times=7),
  Type =rep(c("OOB","ANGRY","BORED","EXCITED","FEAR","HAPPY","SAD"),each=nrow(pd_rf_sen_model$err.rate)),
  Error = c(pd_rf_sen_model$err.rate[,"OOB"],
            pd_rf_sen_model$err.rate[,"ANGRY"],
            pd_rf_sen_model$err.rate[,"BORED"],
            pd_rf_sen_model$err.rate[,"EXCITED"],
            pd_rf_sen_model$err.rate[,"FEAR"],
            pd_rf_sen_model$err.rate[,"HAPPY"],
            pd_rf_sen_model$err.rate[,"SAD"])
)

pd_rf_sen_model$err.rate %>% View()

ggplot(data=pd_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ happy+bored+sad+excited+fear+angry,data = pd_rf_sentence, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

#MS
ms_rf_sentence <-  sentence_detail_ms_tbl %>% select(chatid,sentenceid,positive,neutral,negative) %>% inner_join(MS_sen_T %>% rename(actualemotion=name),by = c("chatid"="chatid","sentenceid"="chatorder")) 

ms_rf_sentence <- ms_rf_sentence %>% unite(chatid, c("chatid","sentenceid")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

ms_rf_sen_model <-  randomForest(actualemotion ~ positive+neutral+negative,data = ms_rf_sentence, proximity=T)

ms_rf_sen_model_err <- data.frame(
  Trees=rep(1:nrow(ms_rf_sen_model$err.rate),times=4),
  Type =rep(c("OOB","NEGATIVE","NEUTRAL","POSITIVE"),each=nrow(ms_rf_sen_model$err.rate)),
  Error = c(ms_rf_sen_model$err.rate[,"OOB"],
            ms_rf_sen_model$err.rate[,"NEGATIVE"],
            ms_rf_sen_model$err.rate[,"NEUTRAL"],
            ms_rf_sen_model$err.rate[,"POSITIVE"])
)

ms_rf_sen_model$err.rate %>% View()

ggplot(data=ms_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ positive+neutral+negative,data = ms_rf_sentence, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val


#IBM
ibm_rf_sentence <-  document_detail_ibm_tbl1 %>% pivot_wider(names_from = tone_id,values_from = score) %>% replace(.,is.na(.),0) %>% select(chatid,chatorder,analytical,tentative,joy,confident,sadness,anger,fear) %>% inner_join(IBM_sen_T %>% rename(actualemotion=name),by = c("chatid"="chatid","chatorder"="chatorder")) 

ibm_rf_sentence <- ibm_rf_sentence %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

ibm_rf_sen_model <-  randomForest(actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear,data = ibm_rf_sentence, proximity=T)

ibm_rf_sen_model_err <- data.frame(
  Trees=rep(1:nrow(ibm_rf_sen_model$err.rate),times=8),
  Type =rep(c("OOB","ANALYTICAL","ANGRY","CONFIDENT","FEAR","JOY","SAD","TENTATIVE"),each=nrow(ibm_rf_sen_model$err.rate)),
  Error = c(ibm_rf_sen_model$err.rate[,"OOB"],
            ibm_rf_sen_model$err.rate[,"ANALYTICAL"],
            ibm_rf_sen_model$err.rate[,"ANGRY"],
            ibm_rf_sen_model$err.rate[,"CONFIDENT"],
            ibm_rf_sen_model$err.rate[,"FEAR"],
            ibm_rf_sen_model$err.rate[,"JOY"],
            ibm_rf_sen_model$err.rate[,"SAD"],
            ibm_rf_sen_model$err.rate[,"TENTATIVE"])
)

ibm_rf_sen_model$err.rate %>% View()

ggplot(data=ibm_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ analytical+tentative+joy+confident+sadness+anger+fear,data = ibm_rf_sentence, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val


#IBM1
ibm_rf_sentence1 <-  document_detail_ibm_tbl1 %>% pivot_wider(names_from = tone_id,values_from = score) %>% replace(.,is.na(.),0) %>% select(chatid,chatorder,joy,sadness,anger,fear) %>% inner_join(IBM_sen_T1 %>% rename(actualemotion=name),by = c("chatid"="chatid","chatorder"="chatorder")) 

ibm_rf_sentence1 <- ibm_rf_sentence1 %>% unite(chatid, c("chatid","chatorder")) %>% select(-value) %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

ibm_rf_sen_model1 <-  randomForest(actualemotion ~ joy+sadness+anger+fear,data = ibm_rf_sentence1, proximity=T)

ibm_rf_sen_model_err1 <- data.frame(
  Trees=rep(1:nrow(ibm_rf_sen_model1$err.rate),times=5),
  Type =rep(c("OOB","ANGRY","FEAR","JOY","SAD"),each=nrow(ibm_rf_sen_model1$err.rate)),
  Error = c(ibm_rf_sen_model1$err.rate[,"OOB"],
            ibm_rf_sen_model1$err.rate[,"ANGRY"],
            ibm_rf_sen_model1$err.rate[,"FEAR"],
            ibm_rf_sen_model1$err.rate[,"JOY"],
            ibm_rf_sen_model1$err.rate[,"SAD"])
)

ibm_rf_sen_model1$err.rate %>% View()

ggplot(data=ibm_rf_sen_model_err1,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ joy+sadness+anger+fear,data = ibm_rf_sentence1, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

```

# All Included level Random Forest

```{r}
ALL_sen_T <- actual_All %>% select(chatid,chatorder,POSITIVE,NEUTRAL,NEGATIVE,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY,CONFIDENT,ANALYTICAL,TENTATIVE) %>%  pivot_longer(cols=c("POSITIVE","NEUTRAL","NEGATIVE","ANGRY","SAD","FEAR","BORED","EXCITED","HAPPY","CONFIDENT","ANALYTICAL","TENTATIVE")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)

all_rf_sentence <- document_detail_ibm_tbl1 %>% mutate(tone_id=ifelse(tone_id=="anger","angry",ifelse(tone_id=="joy","happy",ifelse(tone_id=="sadness","sad",tone_id)))) %>% rename(emotion=tone_id) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>% select(chatid,chatorder,emotion,score)) %>% 
  union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = "emotion",values_to = "score") %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence <- all_rf_sentence %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model <-  randomForest(actualemotion ~ analytical+angry+bored+excited+fear+happy+negative+neutral+positive+sad+tentative+confident,data = all_rf_sentence, proximity=T)

all_rf_sen_model

all_rf_sen_model_err <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model$err.rate),times=6),
  Type =rep(c("OOB","ANGRY","NEGATIVE","NEUTRAL","POSITIVE","SAD"),each=nrow(all_rf_sen_model$err.rate)),
  Error = c(all_rf_sen_model$err.rate[,"OOB"],
            all_rf_sen_model$err.rate[,"ANGRY"],
            all_rf_sen_model$err.rate[,"NEGATIVE"],
            all_rf_sen_model$err.rate[,"NEUTRAL"],
            all_rf_sen_model$err.rate[,"POSITIVE"],
            all_rf_sen_model$err.rate[,"SAD"])
)



ggplot(data=all_rf_sen_model_err,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ analytical+angry+bored+excited+fear+happy+negative+neutral+positive+sad+tentative+confident,data = all_rf_sentence, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val


#ALL1
ALL_sen_T1 <- actual_All %>% select(chatid,chatorder,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY,CONFIDENT,ANALYTICAL,TENTATIVE) %>%  pivot_longer(cols=c("ANGRY","SAD","FEAR","BORED","EXCITED","HAPPY","CONFIDENT","ANALYTICAL","TENTATIVE")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)

all_rf_sentence1 <- document_detail_ibm_tbl1 %>% mutate(tone_id=ifelse(tone_id=="anger","angry",ifelse(tone_id=="joy","happy",ifelse(tone_id=="sadness","sad",tone_id)))) %>% rename(emotion=tone_id) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>% select(chatid,chatorder,emotion,score)) %>% 
  #union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = #"emotion",values_to = "score") %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T1 %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence1 <- all_rf_sentence1 %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model1 <-  randomForest(actualemotion ~ analytical+angry+bored+excited+fear+happy+sad+tentative+confident,data = all_rf_sentence1, proximity=T)

all_rf_sen_model1

all_rf_sen_model_err1 <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model1$err.rate),times=8),
  Type =rep(c("OOB","ANALYTICAL","ANGRY","CONFIDENT","FEAR","HAPPY","SAD","TENTATIVE"),each=nrow(all_rf_sen_model1$err.rate)),
  Error = c(all_rf_sen_model1$err.rate[,"OOB"],
            all_rf_sen_model1$err.rate[,"ANALYTICAL"],
            all_rf_sen_model1$err.rate[,"ANGRY"],
            all_rf_sen_model1$err.rate[,"CONFIDENT"],
            all_rf_sen_model1$err.rate[,"FEAR"],
            all_rf_sen_model1$err.rate[,"HAPPY"],
            all_rf_sen_model1$err.rate[,"SAD"],
            all_rf_sen_model1$err.rate[,"TENTATIVE"]))



ggplot(data=all_rf_sen_model_err1,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ analytical+angry+bored+excited+fear+happy+sad+tentative+confident,data = all_rf_sentence1, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

#ALL2
ALL_sen_T2 <- actual_All %>% select(chatid,chatorder,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY) %>%  pivot_longer(cols=c("ANGRY","SAD","FEAR","BORED","EXCITED","HAPPY")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)
document_detail_ibm_tbl1 %>% distinct(tone_id)

all_rf_sentence2 <- document_detail_ibm_tbl1 %>% mutate(tone_id=ifelse(tone_id=="anger","angry",ifelse(tone_id=="joy","happy",ifelse(tone_id=="sadness","sad",tone_id)))) %>% rename(emotion=tone_id) %>% filter(emotion %in% c("happy","angry","sad","fear")) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>% select(chatid,chatorder,emotion,score)) %>% 
  #union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = #"emotion",values_to = "score") %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T2 %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence2 <- all_rf_sentence2 %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model2 <-  randomForest(actualemotion ~ angry+bored+excited+fear+happy+sad,data = all_rf_sentence2, proximity=T)

all_rf_sen_model2

all_rf_sen_model_err2 <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model2$err.rate),times=7),
  Type =rep(c("OOB","ANGRY","BORED","EXCITED","FEAR","HAPPY","SAD"),each=nrow(all_rf_sen_model2$err.rate)),
  Error = c(all_rf_sen_model2$err.rate[,"OOB"],
            all_rf_sen_model2$err.rate[,"ANGRY"],
            all_rf_sen_model2$err.rate[,"BORED"],
            all_rf_sen_model2$err.rate[,"EXCITED"],
            all_rf_sen_model2$err.rate[,"FEAR"],
            all_rf_sen_model2$err.rate[,"HAPPY"],
            all_rf_sen_model2$err.rate[,"SAD"]))



ggplot(data=all_rf_sen_model_err2,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ angry+bored+excited+fear+happy+sad,data = all_rf_sentence2, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

#ALL3
ALL_sen_T3 <- actual_All %>% select(chatid,chatorder,ANGRY,SAD,HAPPY) %>%  pivot_longer(cols=c("ANGRY","SAD","HAPPY")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)
document_detail_ibm_tbl1 %>% distinct(tone_id)

all_rf_sentence3 <- document_detail_ibm_tbl1 %>% mutate(tone_id=ifelse(tone_id=="anger","angry",ifelse(tone_id=="joy","happy",ifelse(tone_id=="sadness","sad",tone_id)))) %>% rename(emotion=tone_id) %>% filter(emotion %in% c("happy","angry","sad")) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","sad","angry"),names_to = "emotion",values_to = "score") %>% select(chatid,chatorder,emotion,score)) %>% 
  #union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = #"emotion",values_to = "score") %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T3 %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence3 <- all_rf_sentence3 %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model3 <-  randomForest(actualemotion ~ angry+happy+sad,data = all_rf_sentence3, proximity=T)

all_rf_sen_model3

all_rf_sen_model_err3 <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model3$err.rate),times=4),
  Type =rep(c("OOB","ANGRY","HAPPY","SAD"),each=nrow(all_rf_sen_model3$err.rate)),
  Error = c(all_rf_sen_model3$err.rate[,"OOB"],
            all_rf_sen_model3$err.rate[,"ANGRY"],
            all_rf_sen_model3$err.rate[,"HAPPY"],
            all_rf_sen_model3$err.rate[,"SAD"]))



ggplot(data=all_rf_sen_model_err3,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ angry+bored+excited+fear+happy+sad,data = all_rf_sentence3, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val


#ALL4
ALL_sen_T4 <- actual_All %>% select(chatid,chatorder,ANGRY,SAD,HAPPY) %>%  pivot_longer(cols=c("ANGRY","SAD","HAPPY")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)

all_rf_sentence4 <- document_detail_ibm_tbl1 %>% mutate(tone_id=ifelse(tone_id=="anger","angry",ifelse(tone_id=="joy","happy",ifelse(tone_id=="sadness","sad",tone_id)))) %>% rename(emotion=tone_id) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>% select(chatid,chatorder,emotion,score)) %>% 
  union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = "emotion",values_to = "score") %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T4 %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence4 <- all_rf_sentence4 %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model4 <-  randomForest(actualemotion ~ analytical+angry+bored+excited+fear+happy+negative+neutral+positive+sad+tentative+confident,data = all_rf_sentence4, proximity=T)

all_rf_sen_model4

all_rf_sen_model_err4 <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model4$err.rate),times=4),
  Type =rep(c("OOB","ANGRY","HAPPY","SAD"),each=nrow(all_rf_sen_model4$err.rate)),
  Error = c(all_rf_sen_model4$err.rate[,"OOB"],
            all_rf_sen_model4$err.rate[,"ANGRY"],
            all_rf_sen_model4$err.rate[,"HAPPY"],
            all_rf_sen_model4$err.rate[,"SAD"]))



ggplot(data=all_rf_sen_model_err4,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

set.seed(100)
val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ analytical+angry+bored+excited+fear+happy+negative+neutral+positive+sad+tentative+confident,data = all_rf_sentence4, ntree=2000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

#ALL5
ALL_sen_T5 <- actual_All %>% select(chatid,chatorder,ANGRY,EXCITED,SAD,HAPPY) %>%  pivot_longer(cols=c("ANGRY","EXCITED","SAD","HAPPY")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)

all_rf_sentence5 <- document_detail_ibm_tbl1 %>% rename(emotion=tone_id) %>%  filter(emotion %in% c("joy","anger","sadness")) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>%filter(!(emotion %in% c("bored","fear")))  %>%  select(chatid,chatorder,emotion,score)) %>% 
  union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = "emotion",values_to = "score") %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T5 %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence5 <- all_rf_sentence5 %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model5 <-  randomForest(actualemotion ~ angry+excited+happy+joy+negative+neutral+positive+sad+sadness+anger,data = all_rf_sentence5, proximity=T)

all_rf_sen_model5

all_rf_sen_model_err5 <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model5$err.rate),times=5),
  Type =rep(c("OOB","ANGRY","HAPPY","SAD","EXCITED"),each=nrow(all_rf_sen_model5$err.rate)),
  Error = c(all_rf_sen_model5$err.rate[,"OOB"],
            all_rf_sen_model5$err.rate[,"ANGRY"],
            all_rf_sen_model5$err.rate[,"HAPPY"],
            all_rf_sen_model5$err.rate[,"SAD"],
            all_rf_sen_model5$err.rate[,"EXCITED"]))



ggplot(data=all_rf_sen_model_err5,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

set.seed(100)
val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ angry+excited+happy+joy+negative+neutral+positive+sad+sadness+anger,data = all_rf_sentence5, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

#ALL6
ALL_sen_T6 <- actual_All %>% select(chatid,chatorder,ANGRY,EXCITED,SAD,HAPPY,FEAR,BORED) %>%  pivot_longer(cols=c("ANGRY","EXCITED","SAD","HAPPY","FEAR","BORED")) %>%  group_by(chatid,chatorder) %>% arrange(desc(value),.by_group=T) %>% top_n(1) %>% filter(n()==1) %>% ungroup() %>% rename(actualemotion=name)

all_rf_sentence6 <- sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score")   %>%  select(chatid,chatorder,emotion,score) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score)) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(ALL_sen_T6 %>% select(chatid,chatorder,actualemotion),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup()


all_rf_sentence6 <- all_rf_sentence6 %>% unite(chatid, c("chatid","chatorder"))  %>% mutate(actualemotion=as.factor(actualemotion))

set.seed(100)

all_rf_sen_model6 <-  randomForest(actualemotion ~ angry+excited+happy+sad+bored+fear,data = all_rf_sentence6, proximity=T)

all_rf_sen_model6

all_rf_sen_model_err6 <- data.frame(
  Trees=rep(1:nrow(all_rf_sen_model6$err.rate),times=7),
  Type =rep(c("OOB","ANGRY","HAPPY","SAD","EXCITED","BORED","FEAR"),each=nrow(all_rf_sen_model6$err.rate)),
  Error = c(all_rf_sen_model6$err.rate[,"OOB"],
            all_rf_sen_model6$err.rate[,"ANGRY"],
            all_rf_sen_model6$err.rate[,"HAPPY"],
            all_rf_sen_model6$err.rate[,"SAD"],
            all_rf_sen_model6$err.rate[,"EXCITED"],
            all_rf_sen_model6$err.rate[,"BORED"],
            all_rf_sen_model6$err.rate[,"FEAR"]))



ggplot(data=all_rf_sen_model_err6,aes(x=Trees,y=Error)) + geom_line(aes(color=Type))

set.seed(100)
val <-  vector(length = 10)

for (i in 1:10) {
  temp_model <-  randomForest(actualemotion ~ angry+excited+happy+sad+bored+fear,data = all_rf_sentence6, ntree=1000,mtry=i)
  val[i] <- temp_model$err.rate[nrow(temp_model$err.rate),1]
}

val

```

```{r}
all_corr <- document_detail_ibm_tbl1  %>% rename(emotion=tone_id) %>% mutate(emotion=paste("IBM",emotion)) %>%  select(chatid,chatorder,emotion,score) %>% 
  union(sentence_detail_pd_tbl %>% pivot_longer(cols=c("happy","bored","sad","excited","fear","angry"),names_to = "emotion",values_to = "score") %>% mutate(emotion=paste("PD",emotion))  %>% select(chatid,chatorder,emotion,score)) %>% 
  union(sentence_detail_ms_tbl %>% rename(chatorder=sentenceid) %>% pivot_longer(cols=c("positive","neutral","negative"),names_to = "emotion",values_to = "score")%>% mutate(emotion=paste("MS",emotion))  %>%select(chatid,chatorder,emotion,score)) %>% 
  group_by(chatid,chatorder,emotion) %>% summarise(score=sum(score))%>% arrange(emotion) %>% pivot_wider(names_from = emotion,values_from = score) %>% replace(.,is.na(.),0) %>% 
  inner_join(sentence_detail_pd_tbl %>% distinct(chatid,chatorder),by = c("chatid"="chatid","chatorder"="chatorder")) %>% 
  inner_join(actual_All %>% select(-text,-user),by=c("chatid"="chatid","chatorder"="chatorder")) %>% ungroup() %>% select(-chatid,-chatorder) 

str(all_corr)

prediction <- all_corr %>% select(-POSITIVE,-NEUTRAL,-NEGATIVE,-ANGRY,-SAD,-FEAR,-BORED,-EXCITED,-HAPPY,-CONFIDENT,-ANALYTICAL,-TENTATIVE)
reality <- all_corr %>% select(POSITIVE,NEUTRAL,NEGATIVE,ANGRY,SAD,FEAR,BORED,EXCITED,HAPPY,CONFIDENT,ANALYTICAL,TENTATIVE)

corr <- cor(reality, prediction) 
corrplot(corr, method="pie")


?corrplot
```


